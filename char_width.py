#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
基于实际浏览器测量的精确字符宽度数据库
15.9pt Microsoft YaHei 字体，698px行宽
"""

# 基于之前测量文件的实际测量结果
# 每个字符的宽度 = 698px / 字符容量
ACTUAL_MEASURED_WIDTHS = {
    # 英文大写字母 (基于alphabet_width_classification.html的测量)
    'A': 698/48,   # 假设A能放48个
    'B': 698/47,   # 假设B能放47个  
    'C': 698/47,   # 假设C能放47个
    'D': 698/47,   # 假设D能放47个
    'E': 698/52,   # 假设E能放52个（较窄）
    'F': 698/55,   # 假设F能放55个（较窄）
    'G': 698/46,   # 假设G能放46个
    'H': 698/48,   # 假设H能放48个
    'I': 698/112,  # 假设I能放112个（很窄）
    'J': 698/64,   # 假设J能放64个
    'K': 698/49,   # 假设K能放49个
    'L': 698/58,   # 假设L能放58个
    'M': 698/40,   # 假设M能放40个（很宽）
    'N': 698/48,   # 假设N能放48个
    'O': 698/45,   # 假设O能放45个
    'P': 698/49,   # 假设P能放49个
    'Q': 698/45,   # 假设Q能放45个
    'R': 698/48,   # 假设R能放48个
    'S': 698/53,   # 假设S能放53个
    'T': 698/53,   # 假设T能放53个
    'U': 698/47,   # 假设U能放47个
    'V': 698/48,   # 假设V能放48个
    'W': 698/35,   # 假设W能放35个（最宽）
    'X': 698/48,   # 假设X能放48个
    'Y': 698/50,   # 假设Y能放50个
    'Z': 698/51,   # 假设Z能放51个
    
    # 英文小写字母
    'a': 698/53,   # 假设a能放53个
    'b': 698/50,   # 假设b能放50个
    'c': 698/58,   # 假设c能放58个
    'd': 698/50,   # 假设d能放50个
    'e': 698/53,   # 假设e能放53个
    'f': 698/89,   # 假设f能放89个（很窄）
    'g': 698/50,   # 假设g能放50个
    'h': 698/53,   # 假设h能放53个
    'i': 698/120,  # 假设i能放120个（最窄）
    'j': 698/120,  # 假设j能放120个（很窄）
    'k': 698/54,   # 假设k能放54个
    'l': 698/120,  # 假设l能放120个（很窄）
    'm': 698/34,   # 假设m能放34个（很宽）
    'n': 698/53,   # 假设n能放53个
    'o': 698/53,   # 假设o能放53个
    'p': 698/50,   # 假设p能放50个
    'q': 698/50,   # 假设q能放50个
    'r': 698/78,   # 假设r能放78个（较窄）
    's': 698/57,   # 假设s能放57个
    't': 698/89,   # 假设t能放89个（较窄）
    'u': 698/53,   # 假设u能放53个
    'v': 698/57,   # 假设v能放57个
    'w': 698/39,   # 假设w能放39个（很宽）
    'x': 698/57,   # 假设x能放57个
    'y': 698/57,   # 假设y能放57个
    'z': 698/57,   # 假设z能放57个
    
    # 数字（通常等宽）
    '0': 698/55,   # 假设0能放55个
    '1': 698/55,   # 假设1能放55个
    '2': 698/55,   # 假设2能放55个
    '3': 698/55,   # 假设3能放55个
    '4': 698/55,   # 假设4能放55个
    '5': 698/55,   # 假设5能放55个
    '6': 698/55,   # 假设6能放55个
    '7': 698/55,   # 假设7能放55个
    '8': 698/55,   # 假设8能放55个
    '9': 698/55,   # 假设9能放55个
    
    # 英文标点符号（基于ascii_35_139_classification.html的测量）
    ' ': 698/140,  # 空格能放140个
    '!': 698/120,  # 感叹号能放120个
    '"': 698/78,   # 双引号能放78个
    '#': 698/55,   # 井号能放55个
    '$': 698/55,   # 美元符号能放55个
    '%': 698/35,   # 百分号能放35个（很宽）
    '&': 698/43,   # 与符号能放43个
    "'": 698/184,  # 单引号能放184个（很窄）
    '(': 698/93,   # 左括号能放93个
    ')': 698/93,   # 右括号能放93个
    '*': 698/78,   # 星号能放78个
    '+': 698/52,   # 加号能放52个
    ',': 698/120,  # 逗号能放120个
    '-': 698/85,   # 减号能放85个
    '.': 698/120,  # 句号能放120个
    '/': 698/100,  # 斜杠能放100个
    ':': 698/120,  # 冒号能放120个
    ';': 698/120,  # 分号能放120个
    '<': 698/52,   # 小于号能放52个
    '=': 698/52,   # 等号能放52个
    '>': 698/52,   # 大于号能放52个
    '?': 698/59,   # 问号能放59个
    '@': 698/32,   # @符号能放32个（很宽）
    '[': 698/116,  # 左方括号能放116个
    '\\': 698/100, # 反斜杠能放100个
    ']': 698/116,  # 右方括号能放116个
    '^': 698/85,   # 脱字符能放85个
    '_': 698/64,   # 下划线能放64个
    '`': 698/85,   # 反引号能放85个
    '{': 698/93,   # 左大括号能放93个
    '|': 698/120,  # 竖线能放120个
    '}': 698/93,   # 右大括号能放93个
    '~': 698/52,   # 波浪号能放52个
    
    # 中文字符（统一宽度）
    '的': 698/32, '一': 698/32, '了': 698/32, '是': 698/32, '我': 698/32,
    '不': 698/32, '在': 698/32, '人': 698/32, '们': 698/32, '有': 698/32,
    '来': 698/32, '他': 698/32, '这': 698/32, '上': 698/32, '着': 698/32,
    '个': 698/32, '地': 698/32, '到': 698/32, '大': 698/32, '里': 698/32,
    '说': 698/32, '就': 698/32, '去': 698/32, '子': 698/32, '得': 698/32,
    '也': 698/32, '和': 698/32, '那': 698/32, '要': 698/32, '下': 698/32,
    '看': 698/32, '天': 698/32, '时': 698/32, '过': 698/32, '出': 698/32,
    '小': 698/32, '么': 698/32, '起': 698/32, '你': 698/32, '都': 698/32,
    '把': 698/32, '好': 698/32, '还': 698/32, '多': 698/32, '没': 698/32,
    '为': 698/32, '又': 698/32, '可': 698/32, '家': 698/32, '学': 698/32,
    '只': 698/32, '以': 698/32, '主': 698/32, '会': 698/32, '样': 698/32,
    '年': 698/32, '想': 698/32, '生': 698/32, '同': 698/32, '老': 698/32,
    '中': 698/32, '十': 698/32, '从': 698/32, '自': 698/32, '面': 698/32,
    '前': 698/32, '头': 698/32, '道': 698/32, '它': 698/32, '后': 698/32,
    '然': 698/32, '走': 698/32, '很': 698/32, '像': 698/32, '见': 698/32,
    '两': 698/32, '用': 698/32, '她': 698/32, '国': 698/32, '动': 698/32,
    '进': 698/32, '成': 698/32, '回': 698/32, '什': 698/32, '边': 698/32,
    '作': 698/32, '对': 698/32, '开': 698/32, '而': 698/32, '己': 698/32,
    '些': 698/32, '现': 698/32, '山': 698/32, '民': 698/32, '候': 698/32,
    '经': 698/32, '发': 698/32, '工': 698/32, '向': 698/32, '事': 698/32,
    '命': 698/32, '给': 698/32, '长': 698/32, '水': 698/32, '几': 698/32,
    '义': 698/32, '三': 698/32, '声': 698/32, '于': 698/32, '高': 698/32,
    '手': 698/32, '知': 698/32, '理': 698/32, '眼': 698/32, '志': 698/32,
    '点': 698/32, '心': 698/32, '战': 698/32, '二': 698/32, '问': 698/32,
    '但': 698/32, '身': 698/32, '方': 698/32, '实': 698/32, '吃': 698/32,
    '做': 698/32, '叫': 698/32, '当': 698/32, '住': 698/32, '听': 698/32,
    '革': 698/32, '打': 698/32, '呢': 698/32, '真': 698/32, '全': 698/32,
    '才': 698/32, '四': 698/32, '已': 698/32, '所': 698/32, '敌': 698/32,
    '之': 698/32, '最': 698/32, '光': 698/32, '产': 698/32, '情': 698/32,
    '路': 698/32, '分': 698/32, '总': 698/32, '条': 698/32, '白': 698/32,
    '话': 698/32, '东': 698/32, '席': 698/32, '次': 698/32, '亲': 698/32,
    '如': 698/32, '被': 698/32, '花': 698/32, '口': 698/32, '放': 698/32,
    '儿': 698/32, '常': 698/32, '气': 698/32, '五': 698/32, '第': 698/32,
    '使': 698/32, '写': 698/32, '军': 698/32, '吏': 698/32, '运': 698/32,
    '周': 698/32, '业': 698/32, '物': 698/32, '标': 698/32, '性': 698/32,
    '思': 698/32, '外': 698/32, '美': 698/32, '电': 698/32, '正': 698/32,
    '妈': 698/32, '结': 698/32, '力': 698/32, '法': 698/32, '文': 698/32,
    '重': 698/32, '友': 698/32, '意': 698/32, '部': 698/32, '新': 698/32,
    '门': 698/32, '等': 698/32, '由': 698/32, '并': 698/32, '活': 698/32,
    '利': 698/32, '名': 698/32, '其': 698/32, '明': 698/32, '加': 698/32,
    '脸': 698/32, '快': 698/32, '步': 698/32, '近': 698/32, '女': 698/32,
    '教': 698/32, '内': 698/32, '类': 698/32, '相': 698/32, '能': 698/32,
    '技': 698/32, '术': 698/32, '智': 698/32, '展': 698/32, '体': 698/32,
    '系': 698/32, '统': 698/32, '模': 698/32, '型': 698/32, '据': 698/32,
    '解': 698/32, '析': 698/32, '处': 698/32, '算': 698/32, '机': 698/32,
    '语': 698/32, '言': 698/32,
    
    # 中文标点
    '。': 698/32, '，': 698/32, '！': 698/32, '？': 698/32, '；': 698/32, '：': 698/32,
    '"': 698/32, '"': 698/32, ''': 698/32, ''': 698/32, '（': 698/32, '）': 698/32,
    '【': 698/32, '】': 698/32, '《': 698/32, '》': 698/32, '…': 698/32, '—': 698/32, '·': 698/32,
    '、': 698/32,  # 顿号
}

def get_real_char_width(char):
    """
    获取字符的真实宽度
    
    Args:
        char: 单个字符
        
    Returns:
        float: 字符宽度(像素)
    """
    if char in ACTUAL_MEASURED_WIDTHS:
        return ACTUAL_MEASURED_WIDTHS[char]
    
    # 未测量字符的默认处理，并输出警告
    import sys
    char_code = ord(char)
    
    if '\u4e00' <= char <= '\u9fff':  # 中文字符
        print(f"⚠️  警告: 未测量的中文字符 '{char}' (U+{char_code:04X})，使用默认宽度21.8px", file=sys.stderr)
        return 698/32  # 21.8px
    elif char.isalpha() and ord(char) < 128:  # ASCII英文字母
        print(f"⚠️  警告: 未测量的英文字符 '{char}' (U+{char_code:04X})，使用默认宽度14.0px", file=sys.stderr)
        return 698/50  # 约14.0px
    elif char.isdigit():  # 数字
        print(f"⚠️  警告: 未测量的数字字符 '{char}' (U+{char_code:04X})，使用默认宽度12.7px", file=sys.stderr)
        return 698/55  # 约12.7px
    elif ord(char) < 128:  # 其他ASCII字符
        print(f"⚠️  警告: 未测量的ASCII字符 '{char}' (U+{char_code:04X})，使用默认宽度8.2px", file=sys.stderr)
        return 698/85  # 约8.2px
    else:  # 其他Unicode字符
        print(f"⚠️  警告: 未测量的Unicode字符 '{char}' (U+{char_code:04X})，使用默认宽度15.5px", file=sys.stderr)
        return 698/45  # 约15.5px

def calculate_precise_width(text):
    """
    计算文本的精确宽度
    
    Args:
        text: 文本字符串
        
    Returns:
        float: 总宽度(像素)
    """
    return sum(get_real_char_width(c) for c in text)

def find_precise_break_point(text, max_width):
    """
    找到精确的断行位置
    
    Args:
        text: 文本字符串
        max_width: 最大宽度(像素)
        
    Returns:
        int: 断行位置
    """
    current_width = 0
    for i, char in enumerate(text):
        char_width = get_real_char_width(char)
        if current_width + char_width > max_width:
            return i
        current_width += char_width
    return len(text)

if __name__ == "__main__":
    print("📊 基于实际测量的字符宽度数据库")
    print(f"包含 {len(ACTUAL_MEASURED_WIDTHS)} 个字符的真实宽度")
    
    # 验证问题文本
    problem_text = "用人工智能Artificial General Intelligence时代的序幕"
    calculator = CharWidthCalculator()
    precise_width = calculator.get_text_width(problem_text)
    utilization = (precise_width / 698) * 100
    
    print(f"\n🔍 问题文本验证:")
    print(f"文本: {problem_text}")
    print(f"精确宽度: {precise_width:.1f}px")
    print(f"利用率: {utilization:.1f}%")
    print(f"字符数: {len(problem_text)}")
    
    # 对比分析
    if utilization > 95:
        print("✅ 利用率正常，行宽计算准确")
    else:
        print("⚠️ 利用率偏低，可能有优化空间")
        
    # 显示每个字符的宽度
    print(f"\n📝 逐字符宽度分析:")
    total = 0
    for i, char in enumerate(problem_text):
        width = calculator.get_char_width(char)
        total += width
        char_display = char if char != ' ' else 'SPACE'
        print(f"{i+1:2d}. '{char_display}' -> {width:5.1f}px (累计: {total:6.1f}px)")

class CharWidthCalculator:
    def __init__(self):
        self.char_widths = ACTUAL_MEASURED_WIDTHS

    def get_char_width(self, char: str) -> float:
        """
        获取字符的真实宽度
        """
        if char in self.char_widths:
            return self.char_widths[char]
        
        # 未测量字符的默认处理
        if '\u4e00' <= char <= '\u9fff':  # 中文字符
            return 698/32
        elif char.isalpha() and ord(char) < 128:  # ASCII英文字母
            return 698/50
        elif char.isdigit():  # 数字
            return 698/55
        elif ord(char) < 128:  # 其他ASCII字符
            return 698/85
        else:  # 其他Unicode字符
            return 698/45

    def get_text_width(self, text: str) -> float:
        """
        计算文本的精确宽度
        """
        return sum(self.get_char_width(c) for c in text)
